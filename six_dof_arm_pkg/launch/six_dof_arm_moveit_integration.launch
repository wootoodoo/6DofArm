<launch>

    <rosparam file="$(find six_dof_arm_pkg)/config/hardware.yaml" command="load"/>
    <rosparam file="$(find six_dof_arm_pkg)/config/trajectory_controllers.yaml" command="load"/>
    <rosparam file="$(find six_dof_arm_pkg)/config/joint_limits.yaml" command="load"/>
    
    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find six_dof_arm_pkg)/config/six_dof_arm.xacro'" /> 


    <!-- ros_control six dof arm launch file -->
    <!--rosparam file="$(find six_dof_arm_config)/config/six_dof_arm_gazebo_joint_states.yaml" command="load"/-->
    
    <node pkg="rosserial_python" type="serial_node.py" name="arduino">
        <param name="port" value="/dev/ttyACM0"/>
        <param name="baud" value="57600"/>
    </node>   

    <node name="six_dof_arm_hardware_interface" pkg="six_dof_arm_pkg" type="six_dof_arm_hardware_interface" output="screen" ns="/six_dof_arm"/>

    <!-- convert joint states to TF transforms for rviz, etc -->
    <node name="robot_state_publisher" pkg="robot_state_publisher"
        type="robot_state_publisher" respawn="false" output="screen">
    <remap from="/joint_states" to="/six_dof_arm/joint_states" />
    </node>

	<!-- Launch the controllers-->
    <node name="hardware_controller_spawner" pkg="controller_manager"
        type="spawner" respawn="false" output="screen" ns="/six_dof_arm"
         
    args=" arm_trajectory_controller gripper_controller joint_state_controller "/>

    <!-- ros_control trajectory control dof arm launch file -->
    <rosparam file="$(find six_dof_arm_config)/config/trajectory_control.yaml" command="load"/>

	<!-- moveit launch file -->
	<include file="$(find six_dof_arm_config)/launch/moveit_planning_execution.launch" />

	<node name="joint_state_publisher" pkg="joint_state_publisher"
		type="joint_state_publisher">
		<param name="/use_gui" value="false"/>

	<rosparam param="/source_list">[/joint_states]</rosparam>

    </node>	

    <include file="$(find openni_launch)/launch/openni.launch"/>

</launch>
